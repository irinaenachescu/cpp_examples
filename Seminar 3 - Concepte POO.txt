Concepte POO
	1. Clasa
	O clasa reprezinta un tip abstract de date, ce incorporeaza atribute si functii.
	Faciliteaza reutilizarea codului.
	class Nume_Clasa
	{
		tip_acces:
		atribute;
		functii membre;
		
		tip_acces:
		atribute;
		functii membre;
	};
		1.1. Atribute / date membre / variabile de instanta
		Valorile lor reprezinta starea unui obiect.
		Prin prisma incapsularii, sunt definite in zona privata si sunt accesate prin intermediul metodelor publice.
		1.2. Metode / functii membre
		Definesc comportamentul/interfata unui obiect.
		Sunt accesibile din afara clasei.
		Apelul/Invocarea unei metode este echivalent cu transmiterea unui mesaj.
		1.3. Tip de acces
		Descrie tipul de acces la atributele si metodele clasei.
			1.3.1. Private (Implicit, pus de compilator)
			Permite accesul doar din interiorul clasei.
			1.3.2. Protected
			Permite accesul din interiorul clasei si din interiorul claselor derivate.
			1.3.3. Public
			Permite accesul din interiorul clasei si din afara ei.
	2. Obiectul
	Obiectul este o instanta a clasei / o variabila de tipul clasei. Reprezinta ceva concret.
	3. Pointerul this
	Pointer special care contine adresa obiectului care apeleaza metoda.
	Accesibil din orice functie membra a clasei, permite referirea obiectului curent.
	Pointer constant transmis implicit tuturor metodelor membre clasei.
	4. Constructor
	Aloca spatiu pentru obiect si initializeaza atributele acestuia.
	Are numele clasei, nu prezinta tip returnat si poate avea oricati parametri.
	NU au tip returnat explicit deoarece returneaza implicit adresa zonei de memorie rezervata obiectului construit.
	Pot exista oricate versiuni (supraincarcari).
		4.1. Constructor fara parametri (implicit)
		Creat de catre compilator daca nu exista nici un constructor.
		4.2. Constructor cu unul sau mai multi parametri
		4.3. Constructor cu valori implicite
	5. Destructor
	Metoda apelata la "distrugerea" unui obiect, pentru a elibera memoria alocata pentru atribute. 
	Pentru atributele alocate dinamic in functiile constructor este OBLIGATORIU dezalocarea lor in destructor. 
	In caz contrar programul genereaza memory leaks.
	Poate exista maxim unul.
	Generat implicit de catre compilator. 
	Se apeleaza implicit inainte de terminarea programului pentru toate obiectele definite.
	Se apeleaza explicit (prin delete) la pointeri la obiecte.
	Are numele clasei precedat de simbolul ~, nu prezinta tip returnat si nu are parametri.
	NU are tip returnat explicit deoarece returneaza implicit void.
	
	
Exemplu seminar.
	Sa se creeze clasa X cu urmatoarele atribute:
	...
	Sa se defineasca un constructor fara parametri.
	Sa se defineasca un constructor cu parametri.
	Sa se defineasca un constructor cu parametri cu valoarea implicita pentru X.
	Sa se defineasca o metoda care sa afiseze un obiect al clasei.
	Sa se defineasca destructorul in clasa.
	Sa se declare in main obiect de tipul clasei construite si sa se instantieze.
	Sa se afiseze obiectele.
	Sa se defineasca un pointer la un obiect al clasei. Sa se afiseze. Sa se apeleze destructorul.
	